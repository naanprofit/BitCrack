#ifndef POLLARD_TYPES_H
#define POLLARD_TYPES_H
#include "secp256k1.h"
#include <cstdint>

// Hashes within the Pollard engine are stored in little-endian word order so
// that bit offset 0 corresponds to the least significant bit of the RIPEMD160
// digest.

// Result produced by CPU fallback implementations where the entire
// hash160 is returned for host-side window matching.  This remains for
// backwards compatibility with the original PollardEngine walk code.
struct PollardMatch {
    secp256k1::uint256 scalar;
    unsigned int hash[5];
};

// Window information generated by GPU kernels.  Each entry describes a
// contiguous set of bits from a walk where the hash window matched one
// of the target hashes.  ``scalarFragment`` carries the full 256-bit
// scalar value of the walk.  The engine masks off any high bits when
// constructing CRT constraints.
struct PollardWindow {
    unsigned int targetIdx;                  // index of the matching target
    unsigned int offset;                     // bit offset within the
                                             // little-endian hash160
    unsigned int bits;                       // size of the window in bits
    secp256k1::uint256 scalarFragment;       // full scalar at the match
};

// ``MatchRecord`` has moved to ``windowKernel.h`` to avoid polluting this
// header with GPU specific details.
#endif
